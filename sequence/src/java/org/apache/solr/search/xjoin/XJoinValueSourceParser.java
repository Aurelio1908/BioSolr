package org.apache.solr.search.xjoin;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Map;

import org.apache.lucene.index.AtomicReaderContext;
import org.apache.lucene.index.BinaryDocValues;
import org.apache.lucene.queries.function.FunctionValues;
import org.apache.lucene.queries.function.ValueSource;
import org.apache.lucene.queries.function.docvalues.DoubleDocValues;
import org.apache.lucene.search.FieldCache;
import org.apache.lucene.util.BytesRef;
import org.apache.solr.common.util.NamedList;
import org.apache.solr.search.FunctionQParser;
import org.apache.solr.search.SyntaxError;
import org.apache.solr.search.ValueSourceParser;

/**
 * ValueSourceParser to provide a function for retrieving the value of a field from
 * external process results (for use in sort spec, boost function, etc.)
 */
public class XJoinValueSourceParser extends ValueSourceParser {
	
	// the name of the associated XJoinSearchComponent
	private String componentName;
	
	// the default value if the results don't have an entry
	private double defaultValue;
	
	/**
	 * Initialise - set the join id field.
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public void init(NamedList args) {
		super.init(args);
		
		componentName = (String)args.get(XJoinParameters.INIT_XJOIN_COMPONENT_NAME);
		defaultValue = (double)args.get(XJoinParameters.INIT_DEFAULT_VALUE);
	}
	
	/**
	 * Provide a ValueSource for external process results, which are obtained from the
	 * request context (having been placed there by XJoinSearchComponent).
	 */
	@Override
	public ValueSource parse(FunctionQParser fqp) throws SyntaxError {
		XJoinSearchComponent xJoin = (XJoinSearchComponent)fqp.getReq().getCore().getSearchComponent(componentName);
		String joinField = xJoin.getJoinField();
		XJoinResults results = (XJoinResults)fqp.getReq().getContext().get(xJoin.getResultsTag());
		if (results == null) {
			throw new RuntimeException("No xjoin results in request context");
		}
		return new XJoinValueSource(joinField, results, fqp.parseArg());
	}
	
	/**
	 * ValueSource class for external process results.
	 */
	public class XJoinValueSource extends ValueSource {

		// the join field
		private String joinField;
		
		// the external process results (generated by XJoinSearchComponent)
		private XJoinResults results;
		
		// the method on external results objects to use as the value
		private String methodName;

		/**
		 * Create an ExternalValueSource for the given external process results, for
		 * extracting the named property (the method used to extract the property is based
		 * on the argument to the function, so e.g. (foo_bar) => getFooBar())
		 */
		public XJoinValueSource(String joinField, XJoinResults results, String arg) {
			this.joinField = joinField;
			this.results = results;
			this.methodName = NameConverter.getMethodName(arg);
		}

		@Override
		@SuppressWarnings("rawtypes")
		public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
			final BinaryDocValues joinValues = FieldCache.DEFAULT.getTerms(readerContext.reader(), joinField, false);

			return new DoubleDocValues(this) {

				@Override
				public double doubleVal(int doc) {
					BytesRef joinValue = joinValues.get(doc);
					if (joinValue == null) {
						throw new RuntimeException("No such doc: " + doc);
					}
					Object result = results.getResult(joinValue.utf8ToString());
					if (result == null) {
						return defaultValue;
					}
					try {
						Method method = result.getClass().getMethod(methodName);
						return (Double)method.invoke(result);
					} catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
						throw new RuntimeException(e);
					}
				}
				
			};
		}
		
		@Override
		public String description() {
			return "$description$";
		}

		@Override
		public boolean equals(Object object) {
			if (! (object instanceof XJoinValueSource)) {
				return false;
			}
			return results.equals(((XJoinValueSource)object).results);
		}

		@Override
		public int hashCode() {
			return results.hashCode();
		}
		
	}

}
